import argparse
import os
import sys
import datetime
from dataCleaning import dataCleaning
from expAnalysis import expAnalysis
from pepFeature import pepFeature
from referenceGenerate import generateReference
from referenceGenerate import removeHomo

def main():
    parser = argparse.ArgumentParser(description="Protein Mass Spectrum Analysis Tool with Functions generateReference, removeHomo, dataCleaning, pepFeature, expAnalysis",
                                     usage='proteinAnalysis.py <function> [options]')
    subparsers = parser.add_subparsers(title='Functions', dest='function')

    # Subparser for Function generateReference
    parser_generateReference = subparsers.add_parser('generateReference', help='Calling ORF from transcript fasta file')
    parser_generateReference.add_argument("-g","--gtf", required=True,help="path of gtf file")
    parser_generateReference.add_argument("-f","--fasta", required=True,help="path of genome fasta file")
    parser_generateReference.add_argument("-p","--protein",default=False,type=bool,help="whether remove protein coding transcript (default:False)")
    parser_generateReference.add_argument("-t","--thread", type=int,default=1,help="number of thread (default:1)")

    # Subparser for Function removeHomo
    parser_removeHomo = subparsers.add_parser('removeHomo', help='Remove proteins that are homologous to the specified reference file')
    parser_removeHomo.add_argument("-r","--ORF",required=True,help="path of ORF fasta file")
    parser_removeHomo.add_argument("-b","--db",help="path of database to blast")
    parser_removeHomo.add_argument("-f","--ref",help="if there is not a database to blast, supply the path of reference protein fasta file")
    parser_removeHomo.add_argument("-t","--thread",default=1,type=int,help="number of threads (default:10)")

    # Subparser for Function dataCleaning
    parser_dataCleaning = subparsers.add_parser('dataCleaning', help='This function can only process the quants file of DIA-NN software, it will output the presurcor, peptide and protein expression matrix file.')
    parser_dataCleaning.add_argument("-q","--quantFile",required=True,help="path of DIA-NN report.tsv file")

    # Subparser for Function pepFeature
    parser_pepFeature = subparsers.add_parser('pepFeature', help='quantity transcript for each cell')
    parser_pepFeature.add_argument("-q","--quantFile",required=True,help="tab delimited file of protein expression matrix")
    parser_pepFeature.add_argument("-r","--pepRef",required=True,help="path of protein reference fasta file")
    parser_pepFeature.add_argument("-t","--transcriptRef",required=True,help="path of transcript reference fasta file which is used for ORF calling")
    parser_pepFeature.add_argument("-o","--outpath",help="directory of this step output")

    # Subparser for Function expAnalysis
    parser_expAnalysis = subparsers.add_parser('expAnalysis', help='allele specific transcript analysis')
    parser_expAnalysis.add_argument("-p","--pepQuant",required=True,help="tab delimited file of protein expression matrix")
    parser_expAnalysis.add_argument("-t","--transcriptQuant",required=True,help="tab delimited file of transcript expression matrix")
    parser_expAnalysis.add_argument("-c","--cor", default='pearson',type=str,help="method used for correlation analysis, default is 'pearson'")
    parser_expAnalysis.add_argument("-m","--manifest",help="tab delimited file containing the mapping between protein ids and transcript ids, optional only for protein reference generated by 'generateReference'")
    parser_expAnalysis.add_argument("-o","--outpath",help="directory of this step output")

    args = parser.parse_args()

    if args.function == 'generateReference':
        generateReference(gtf=args.gtf,fasta=args.fasta,protein=args.protein,thread=args.thread)
    elif args.function == 'removeHomo':
        removeHomo(ORF=args.ORF,db=args.db,refFa=args.ref,thread=args.thread)
    elif args.function == 'dataCleaning':
        dataCleaning(quantFile=args.quantFile)
    elif args.function == 'pepFeature':
        pepFeature(quantFile=args.quantFile,pepRef=args.pepRef,transcriptRef=args.transcriptRef,outpath=args.outpath)
    elif args.function == 'expAnalysis':
        expAnalysis(pepQuant=args.pepQuant,transcriptQuant=args.transcriptQuant,cor=args.cor,manifest=args.manifest,outpath=args.outpath)
    else:
        print("Unknown function. Use -h for help.")


if __name__ == "__main__":
    main()
